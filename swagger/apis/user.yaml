paths:
  /api/user:
    get:
      summary: "전체 유저 조회"
      description: "get 요청, 사용하지는 않지만 데이터베이스 점검용으로 놔뒀음!"
      tags: [User]
  /api/user/{userEmail}:
    get:
      summary: "유저 정보 조회"
      description: "params에 user의 email을 담아 get 요청, 추후 email이 아닌 id로도 변경될 가능성 있음"
      tags: [User]
      parameters:
        - name: "userEmail"
          in: "path"
          required: true
          description: "유저 이메일"
          schema:
            type: string
          examples:
            Sample:
              value: "shn7446@naver.com"
              summary: "example email"
      responses:
        "200":
          description: "유저 상세 정보"
          schema:
            type: object
            properties:
              success:
                type: boolean
              user:
                type: object
  /api/user/register:
    post:
      summary: "회원가입"
      description: "body에 userEmail, nickname, password를 넣어 post 요청"
      tags: [User]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userEmail:
                  type: string
                nickname:
                  type: string
                password:
                  type: string
              example:
                userEmail: "sss@naaa.com"
                nickname: "영희"
                password: "passsss"
      responses:
        "200":
          description: "회원가입 성공"
  /api/user/login:
    post:
      summary: "회원 로그인"
      description: "userEmail과 password를 body에 담아 post 요청, get 방식이 아님에 주의"
      tags: [User]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userEmail:
                  type: string
                password:
                  type: string
              example:
                userEmail: "shn7446@naver.com"
                password: "password"
      responses:
        "200":
          description: "로그인 성공, 토큰 발행"
